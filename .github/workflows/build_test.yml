name: Build and test

on:
  workflow_dispatch:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"
  pull_request:
    branches:
      - "main"
    paths-ignore:
      - "**/*.md"
      - ".gitignore"
      - ".hadolint.yaml"
      - ".pre-commit-config.yaml"
      - ".yamllint.yaml"
      - "LICENSE"
      - "Makefile"

env:
  IMAGE_NAME: "cdktf-bundle"

jobs:

  build_docker_image:
    name: Build the Docker image
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        language:
          - python
          - go
        platform:
          - os: linux
            platforms: "linux/amd64,linux/arm64"
    # TODO: deactivated as the build is not functional (test failure) and I currently don't have
    # the possibility to reproduce and debug locally.
    #      - os: darwin
    #        platforms: "linux/amd64,linux/arm64"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use CDKTF version from tag
        if: ${{ startsWith(github.event.ref, 'refs/tags/') }}
        run: |
          TAG_VERSION=$(echo "${{ github.event.ref }}" | sed -n 's/.*\/v\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
          echo "CDKTF_VERSION=${TAG_VERSION}" >> "${GITHUB_ENV}"

      - name: Use CDKTF version from Dockerfile
        if: ${{ !startsWith(github.event.ref, 'refs/tags/') }}
        run: |
          DOCKERFILE_VERSION=$(sed -n 's/^.*CDKTF_VERSION=\"\(.*\)\"$/\1/p' Dockerfile)
          echo "CDKTF_VERSION=${DOCKERFILE_VERSION}" >> "${GITHUB_ENV}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.platform.platforms }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: docker_metadata
        name: Generate the Docker metadata
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            suffix=-${{ matrix.language }}-${{ matrix.platform.os }},onlatest=true
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Export the Docker metadata
        run: |
          metadata_file="docker_metadata_${{ matrix.language }}_${{ matrix.platform.os }}.json"
          echo "${{ toJSON(steps.docker_metadata.outputs.json) }}" > ${metadata_file}

      - name: Upload the Docker metadata
        uses: actions/upload-artifact@v3
        with:
          name: docker_metadata_${{ matrix.language }}_${{ matrix.platform.os }}
          path: docker_metadata_${{ matrix.language }}_${{ matrix.platform.os }}.json
          retention-days: 7

      - name: Get the first image tag
        # Take the first tag and make it available as an environment variable.
        run: |
          metadata_file="docker_metadata_${{ matrix.language }}_${{ matrix.platform.os }}.json"
          echo "DOCKER_IMAGE_TAG=$(jq -r .tags[0] ${metadata_file})" >> "${GITHUB_ENV}"

      - name: Build and push the Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: |
            BASE=${{ matrix.language }}
            CDKTF_VERSION=${{ env.CDKTF_VERSION }}
          platforms: ${{ matrix.platform.platforms }}
          tags: ${{ steps.docker_metadata.outputs.tags }}
          labels: ${{ steps.docker_metadata.outputs.labels }}
          push: true

      - name: Analyze the image efficiency
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            wagoodman/dive:latest \
            --ci \
            --lowestEfficiency=0.95 \
            --highestUserWastedPercent=0.05 \
            ${{ env.DOCKER_IMAGE_TAG }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.9.2
        with:
          image-ref: ${{ env.DOCKER_IMAGE_TAG }}
          format: "table"
          exit-code: "0"  # TODO: set to "1" when vulnerability is fixed on the terraform binary
          ignore-unfixed: true
          vuln-type: "os,library"
          scanners: "vuln"
          severity: "CRITICAL,HIGH"
          # Ignore the CDKTF GO templates.
          skip-files: "/usr/local/lib/node_modules/cdktf-cli/templates/go/go.mod,
                       /usr/local/lib/node_modules/cdktf-cli/node_modules/@cdktf/cli-core/templates/go/go.mod"

  #####

  test_docker_image:
    name: Test the Docker image
    needs: build_docker_image
    strategy:
      fail-fast: false
      matrix:
        language:
          - python
          - go
        platform:
          - os: linux
            runner: ubuntu-latest
    # TODO: deactivated as the build is not functional (test failure) and I currently don't have
    # the possibility to reproduce and debug locally.
    #      - os: darwin
    #        runner: macos-latest
    runs-on: ${{ matrix.platform.runner }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker
        if: ${{ matrix.platform.os == 'darwin' }}
        run: |
          brew install docker colima
          colima start

      - uses: actions/download-artifact@v3
        with:
          name: docker_metadata_${{ matrix.language }}_${{ matrix.platform.os }}
          path: .

      - name: Get the first image tag
        # Take the first tag and make it available as an environment variable.
        run: |
          metadata_file="docker_metadata_${{ matrix.language }}_${{ matrix.platform.os }}.json"
          echo "DOCKER_IMAGE_TAG=$(jq -r .tags[0] ${metadata_file})" >> "${GITHUB_ENV}"

      - name: Install the test framework
        working-directory: ./test
        run: npm install

      - uses: actions/setup-python@v4
        if: ${{ matrix.language == 'python' }}
        with:
          python-version: "3.11"

      - name: Install Poetry
        if: ${{ matrix.language == 'python' }}
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Run the tests
        working-directory: ./test/${{ matrix.language }}
        run: npx bats .
        env:
          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE_TAG }}
